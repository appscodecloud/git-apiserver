// +build !ignore_autogenerated

/*
Copyright 2018 The KubeCI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	repositories "kube.ci/git-apiserver/apis/repositories"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_Branch_To_repositories_Branch,
		Convert_repositories_Branch_To_v1alpha1_Branch,
		Convert_v1alpha1_BranchList_To_repositories_BranchList,
		Convert_repositories_BranchList_To_v1alpha1_BranchList,
		Convert_v1alpha1_BranchStatus_To_repositories_BranchStatus,
		Convert_repositories_BranchStatus_To_v1alpha1_BranchStatus,
	)
}

func autoConvert_v1alpha1_Branch_To_repositories_Branch(in *Branch, out *repositories.Branch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_BranchStatus_To_repositories_BranchStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Branch_To_repositories_Branch is an autogenerated conversion function.
func Convert_v1alpha1_Branch_To_repositories_Branch(in *Branch, out *repositories.Branch, s conversion.Scope) error {
	return autoConvert_v1alpha1_Branch_To_repositories_Branch(in, out, s)
}

func autoConvert_repositories_Branch_To_v1alpha1_Branch(in *repositories.Branch, out *Branch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_repositories_BranchStatus_To_v1alpha1_BranchStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_repositories_Branch_To_v1alpha1_Branch is an autogenerated conversion function.
func Convert_repositories_Branch_To_v1alpha1_Branch(in *repositories.Branch, out *Branch, s conversion.Scope) error {
	return autoConvert_repositories_Branch_To_v1alpha1_Branch(in, out, s)
}

func autoConvert_v1alpha1_BranchList_To_repositories_BranchList(in *BranchList, out *repositories.BranchList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]repositories.Branch)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_BranchList_To_repositories_BranchList is an autogenerated conversion function.
func Convert_v1alpha1_BranchList_To_repositories_BranchList(in *BranchList, out *repositories.BranchList, s conversion.Scope) error {
	return autoConvert_v1alpha1_BranchList_To_repositories_BranchList(in, out, s)
}

func autoConvert_repositories_BranchList_To_v1alpha1_BranchList(in *repositories.BranchList, out *BranchList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Branch)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_repositories_BranchList_To_v1alpha1_BranchList is an autogenerated conversion function.
func Convert_repositories_BranchList_To_v1alpha1_BranchList(in *repositories.BranchList, out *BranchList, s conversion.Scope) error {
	return autoConvert_repositories_BranchList_To_v1alpha1_BranchList(in, out, s)
}

func autoConvert_v1alpha1_BranchStatus_To_repositories_BranchStatus(in *BranchStatus, out *repositories.BranchStatus, s conversion.Scope) error {
	out.LastCommitHash = in.LastCommitHash
	return nil
}

// Convert_v1alpha1_BranchStatus_To_repositories_BranchStatus is an autogenerated conversion function.
func Convert_v1alpha1_BranchStatus_To_repositories_BranchStatus(in *BranchStatus, out *repositories.BranchStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_BranchStatus_To_repositories_BranchStatus(in, out, s)
}

func autoConvert_repositories_BranchStatus_To_v1alpha1_BranchStatus(in *repositories.BranchStatus, out *BranchStatus, s conversion.Scope) error {
	out.LastCommitHash = in.LastCommitHash
	return nil
}

// Convert_repositories_BranchStatus_To_v1alpha1_BranchStatus is an autogenerated conversion function.
func Convert_repositories_BranchStatus_To_v1alpha1_BranchStatus(in *repositories.BranchStatus, out *BranchStatus, s conversion.Scope) error {
	return autoConvert_repositories_BranchStatus_To_v1alpha1_BranchStatus(in, out, s)
}
