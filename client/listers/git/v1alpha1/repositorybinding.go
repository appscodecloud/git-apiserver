/*
Copyright 2018 The KubeCI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kube.ci/git-apiserver/apis/git/v1alpha1"
)

// RepositoryBindingLister helps list RepositoryBindings.
type RepositoryBindingLister interface {
	// List lists all RepositoryBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryBinding, err error)
	// RepositoryBindings returns an object that can list and get RepositoryBindings.
	RepositoryBindings(namespace string) RepositoryBindingNamespaceLister
	RepositoryBindingListerExpansion
}

// repositoryBindingLister implements the RepositoryBindingLister interface.
type repositoryBindingLister struct {
	indexer cache.Indexer
}

// NewRepositoryBindingLister returns a new RepositoryBindingLister.
func NewRepositoryBindingLister(indexer cache.Indexer) RepositoryBindingLister {
	return &repositoryBindingLister{indexer: indexer}
}

// List lists all RepositoryBindings in the indexer.
func (s *repositoryBindingLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryBinding))
	})
	return ret, err
}

// RepositoryBindings returns an object that can list and get RepositoryBindings.
func (s *repositoryBindingLister) RepositoryBindings(namespace string) RepositoryBindingNamespaceLister {
	return repositoryBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RepositoryBindingNamespaceLister helps list and get RepositoryBindings.
type RepositoryBindingNamespaceLister interface {
	// List lists all RepositoryBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryBinding, err error)
	// Get retrieves the RepositoryBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RepositoryBinding, error)
	RepositoryBindingNamespaceListerExpansion
}

// repositoryBindingNamespaceLister implements the RepositoryBindingNamespaceLister
// interface.
type repositoryBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RepositoryBindings in the indexer for a given namespace.
func (s repositoryBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryBinding))
	})
	return ret, err
}

// Get retrieves the RepositoryBinding from the indexer for a given namespace and name.
func (s repositoryBindingNamespaceLister) Get(name string) (*v1alpha1.RepositoryBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("repositorybinding"), name)
	}
	return obj.(*v1alpha1.RepositoryBinding), nil
}
